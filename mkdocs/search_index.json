{
    "docs": [
        {
            "location": "/", 
            "text": "This is the \nunoffocial\n documentation for the MPesa API. Most part of this documentation is a duplication of \nSafaricom's documentation which is in PDF\n.\n\n\nPreamble\n\n\nFrom \nSafaricom's website\n:\n\n\n\n\nThe new M-PESA platform dubbed G2 (for M-PESA 2nd generation platform) offers versatile integration capabilities that our development partners can take advantage of, to create excellent M-PESA journeys across the different industries they serve. This was a key factor in moving to the new platform. We have been consolidating the different interfaces our developers have expressed interest in to enable innovation around M-PESA. As expected, most of these are about the payment journeys, covering both disbursements (Business to Customers \u2013 B2C) and service payments (Customer to Business \u2013 C2B and Business to Business \u2013 B2B). These and other features are now available via secure Application Programming Interfaces (APIs) that allow for third party applications to easily plug into M-PESA.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#preamble", 
            "text": "From  Safaricom's website :   The new M-PESA platform dubbed G2 (for M-PESA 2nd generation platform) offers versatile integration capabilities that our development partners can take advantage of, to create excellent M-PESA journeys across the different industries they serve. This was a key factor in moving to the new platform. We have been consolidating the different interfaces our developers have expressed interest in to enable innovation around M-PESA. As expected, most of these are about the payment journeys, covering both disbursements (Business to Customers \u2013 B2C) and service payments (Customer to Business \u2013 C2B and Business to Business \u2013 B2B). These and other features are now available via secure Application Programming Interfaces (APIs) that allow for third party applications to easily plug into M-PESA.", 
            "title": "Preamble"
        }, 
        {
            "location": "/b2b/introduction/", 
            "text": "Source:\n M-PESA / Developer Guide - B2B Interface, v 0.3 (April 24, 2015) (c) Safaricom\n\n\n\n\nScope\n\n\nThe present document specifies the real time B2B Web Service aspects of the interface. All aspects of B2B Web Service are defined here, these being:\n\n\n\n\nMessage Flow Description\n\n\nDataTypeDefinition\n\n\nWeb Service Interface Definition\n\n\nTransactionTypesdescription\n\n\nWSDL for this specification\n\n\nExample\n\n\n\n\nOverview - API\n\n\nThis document details the interface specification for a real time M-Pesa transaction API delivered within the MPesa Core API Framework. The Core API defines an abstract model for API requests which includes 4 distinct parties to API operations, as well as a generic set of API operation parameters.\n\n\nInitiators\n are the organization or entity requesting that an API operation or transaction is performed. \n\n\nThe \nCaller\n is the actual piece of software which communicates with the MPesa Core API web service. \n\n\nThe \nPrimary Party\n is (typically) the debit party within an existing MPesa financial transaction.\n\n\nThe \nReceiver Party\n is correspondingly the credit party in an MPesa financial transaction.", 
            "title": "Introduction"
        }, 
        {
            "location": "/b2b/introduction/#scope", 
            "text": "The present document specifies the real time B2B Web Service aspects of the interface. All aspects of B2B Web Service are defined here, these being:   Message Flow Description  DataTypeDefinition  Web Service Interface Definition  TransactionTypesdescription  WSDL for this specification  Example", 
            "title": "Scope"
        }, 
        {
            "location": "/b2b/introduction/#overview-api", 
            "text": "This document details the interface specification for a real time M-Pesa transaction API delivered within the MPesa Core API Framework. The Core API defines an abstract model for API requests which includes 4 distinct parties to API operations, as well as a generic set of API operation parameters.  Initiators  are the organization or entity requesting that an API operation or transaction is performed.   The  Caller  is the actual piece of software which communicates with the MPesa Core API web service.   The  Primary Party  is (typically) the debit party within an existing MPesa financial transaction.  The  Receiver Party  is correspondingly the credit party in an MPesa financial transaction.", 
            "title": "Overview - API"
        }, 
        {
            "location": "/b2b/message_flow/", 
            "text": "Diagram", 
            "title": "Message Flow Description"
        }, 
        {
            "location": "/b2b/message_flow/#diagram", 
            "text": "", 
            "title": "Diagram"
        }, 
        {
            "location": "/b2b/data_type_definition/", 
            "text": "3.1 \nIdentityType\n enumeration\n\n\nList of \nIdentityType\n values.\n\n\n\n\n\n\n\n\nEnumeration\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1000\n\n\nCustomer\n\n\n\n\n\n\n2000\n\n\nSPOperator\n\n\n\n\n\n\n3000\n\n\nOrganizationOperator\n\n\n\n\n\n\n5000\n\n\nOrganization\n\n\n\n\n\n\n6000\n\n\nTill\n\n\n\n\n\n\n8000\n\n\nSP\n\n\n\n\n\n\n\n\n3.2 \nIdentifierType\n enumeration\n\n\nList of \nIdentityType\n values.\n\n\n\n\n\n\n\n\nEnumeration\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nMSISDN\n\n\n\n\n\n\n2\n\n\nTillNumber\n\n\n\n\n\n\n3\n\n\nSPShortCode\n\n\n\n\n\n\n4\n\n\nOrganizationShortCode\n\n\n\n\n\n\n5\n\n\nIdentityID\n\n\n\n\n\n\n6\n\n\nO2CLink\n\n\n\n\n\n\n9\n\n\nSPOperatorCode\n\n\n\n\n\n\n10\n\n\nPOSNumber\n\n\n\n\n\n\n10\n\n\nOrganizationOperatorUserName\n\n\n\n\n\n\n12\n\n\nOrganizationOperatorCode\n\n\n\n\n\n\n13\n\n\nVoucherCode\n\n\n\n\n\n\n\n\n3.3 \nParameterType\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nxsd:string\n\n\nNo\n\n\nIt indicates a parameter name.\n\n\n\n\n\n\nValue\n\n\nxsd:string\n\n\nNo\n\n\nIt indicates a parameter value.\n\n\n\n\n\n\n\n\n3.4 \nParameters\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nParameterTyp e[1..unbounde d]\n\n\nNo\n\n\nIt is used to carry specific parameters for specific transaction or business operation.\n\n\n\n\n\n\n\n\n3.5 \nReferenceData\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nReferenceItem\n\n\nParameterTyp e[1..unbounde d]\n\n\nNo\n\n\nIt is used carry some reference data that MM need not analyze but need to record it into transaction log.\n\n\n\n\n\n\n\n\n3.6 \nTransaction\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCommandID\n\n\nxsd:string\n\n\nNo\n\n\nThe unique identifier of transaction/business operation. Max length is 64. eg:\nBusinessBuyGoods\nBusinessPayBill\nDisburseFundsToBusiness\nBusinessToBusinessTransfer\nBusinessTransferFromMMFToUtility\nBusinessTransferFromUtilityToMMF\nMerchantToMerchantTransfer\nMerchantTransferFromMerchantToWorking\nMerchantTransferFromWorkingToMerchant\nOrgBankAccountWithdrawal\nOrgRevenueSettlement\nMerchantServicesMMFAccountTransfer\nAgencyFloatAdvance\n\n\n\n\n\n\nLanguageCode\n\n\nxsd:string\n\n\nYes\n\n\nIt indicates language. It\u2019s reserved.\n\n\n\n\n\n\nOriginatorConv ersationID\n\n\nxsd:string\n\n\nNo\n\n\nThe unique identifier of the request message generated by third party. It is used to identify a request between the third party and MM. Max length is 128. Field must start with the Organisation short and name of organisation. Eg. \n232323_KCBOrg_XXXXXX\n. \nXXXXX\n must be unique for every transaction.\n\n\n\n\n\n\nConversationID\n\n\nxsd:string\n\n\nYes\n\n\nThe unique identifier generated by MM for a previous request message. It is used to support communication multi-times between the third party and MM for one operation/transaction.\n\n\n\n\n\n\nRemark\n\n\nxsd:string\n\n\nYes\n\n\nThe remark information about this operation. Max length is 255\n\n\n\n\n\n\nParameters\n\n\nParameters\n\n\nYes\n\n\nIt is used to carry specific parameters for specific transaction or business operation.\nIf the element EncryptedParameters presents, this parameter should not present.\n\n\n\n\n\n\nReferenceData\n\n\nReferenceData\n\n\nYes\n\n\nIt is used carry some reference data that MM need not analyze but need to record it into transaction log.\n\n\n\n\n\n\nTimestamp\n\n\nxsd:string\n\n\nNo\n\n\nThe timestamp generated by the third party.\n\n\n\n\n\n\n\n\n3.7 \nCaller\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCallerType\n\n\nxsd:integer\n\n\nNo\n\n\nIndicates the type of the caller: 2 - APICaller, 3 - Other(Reserved)\n\n\n\n\n\n\nThirdPartyID\n\n\nxsd:string\n\n\nNo\n\n\nhe unique identifier of a third party system defined in MM. It indicates the third party which initiates the request. Max length is 20\n\n\n\n\n\n\nPassword\n\n\nxsd:string\n\n\nYes\n\n\nThis security credential of the ThirdPartyID defined in MM. If the password feature for third party is used in MM, then this parameter must be presented in the request message.\n\n\n\n\n\n\nCheckSum\n\n\nxsd:string\n\n\nYes\n\n\nCurrently it is unused. It is reserved for API security.\n\n\n\n\n\n\nResultURL\n\n\nxsd:string\n\n\nYes\n\n\nIt indicates the destination URL where Broker should send the result message to.\n\n\n\n\n\n\n\n\n3.8 \nInitiator\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIdentifierType\n\n\nIdentifierType\n\n\nNo\n\n\nIt indicates the identifier type of the initiator. The value of this parameter must be a valid identifier type supported by MM.\n\n\n\n\n\n\nIdentifier\n\n\nxsd:string\n\n\nNo\n\n\nIt indicates the identifier of the initiator. Its value must match the inputted value of the parameter IdentifierType.\n\n\n\n\n\n\nSecurityCredential\n\n\nxsd:string\n\n\nNo\n\n\nIt indicates the security credential of the initiator. Its value must match the inputted value of the parameter IdentifierType.\n\n\n\n\n\n\nShortCode\n\n\nxsd:string\n\n\nYes\n\n\nWhen the initiator is an organization operator, this parameter must be present in the request to indicate which organization the operator belongs to.\nIf the initiator is not an organization operator, this parameter should not be present.\n\n\n\n\n\n\n\n\n3.8.1 Password Encryption\n\n\nThe Caller will be required to confirm its authority to act on behalf of the Initiator (in other words, a specific M-PESA organisation) by presenting the user name and password for the Initiator, the latter encrypted with the public key from an X509 certificate issued to the Initiator specifically for this purpose.\n\n\nThe following algorithm must be followed by the Initiator to encrypt passwords: \n\n\nFirst, create the block of data to be encrypted:\n\n\n\n\nWrite the unencrypted password value.\n\n\nThen, encrypt the block of data created in step 1 with the public portion of the password key certificate. Use the RSA algorithm, and use PKCS #1.5 padding (not OAEP), and add the result to the encrypted stream \u2013 this becomes the encrypted password which is submitted via the API.\n\n\nConvert the resulting encrypted byte array into a string using base64 encoding. Present this base64 encoded string in the API request as the initiator SecurityCredential value.\n\n\n\n\n3.9 \nPrimaryParty\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIdentifierType\n\n\nIdentifierType\n\n\nNo\n\n\nIt indicates the identifier type of the primary party. The value of this parameter must be a valid identifier type supported by MM and must match the inputted value of the parameter IdentityType.\n\n\n\n\n\n\nIdentifier\n\n\nxsd:string\n\n\nNo\n\n\nIt indicates a parameter value.\n\n\n\n\n\n\nShortCode\n\n\nxsd:string\n\n\nYes\n\n\nIt is reserved\n\n\n\n\n\n\n\n\n3.10 \nReceiverParty\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIdentifierType\n\n\nIdentifierType\n\n\nNo\n\n\nIt indicates the identifier type of the recipient party. The value of this parameter must be a valid identifier type supported by MM.\n\n\n\n\n\n\nIdentifier\n\n\nxsd:string\n\n\nNo\n\n\nIt indicates the identifier of the recipient party. Its value must match the inputted value of the parameter IdentifierType.\n\n\n\n\n\n\nShortCode\n\n\nxsd:string\n\n\nYes\n\n\nWhen the receiver party is an organization operator or a Till, this parameter must be present in the request to indicate which organization the receiver party belongs to.\nIf the receiver party is not an organization operator or a Till, this parameter should not be present.\n\n\n\n\n\n\n\n\n3.11 \nAccessDevice\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIdentifierType\n\n\nIdentifierType\n\n\nNo\n\n\nIt indicates the identifier type of the access device.\n\n\n\n\n\n\nIdentifier\n\n\nxsd:string\n\n\nNo\n\n\nIt indicates the identifier of the access device. Its value must match the inputted value of parameter IdentifierType\n\n\n\n\n\n\n\n\n3.12 \nIdentity\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCaller\n\n\nCaller\n\n\nNo\n\n\nIt indicates the third party which initiates the request\n\n\n\n\n\n\nInitiator\n\n\nInitiator\n\n\nNo\n\n\nIt indicates the identity who makes the request. An initiator must be one of the following identity types:\nSP operator\nOrganizationoperator(11)\nNOTE: The value \n11\n(Organization Operator) or \n14\n(SP Operator) will be used for all the services in this document.\n\n\n\n\n\n\nPrimartyParty\n\n\nPrimartyParty\n\n\nYes\n\n\nIf business operation/action, this element is not present; if transaction, this can be either the debit party or the credit party according to the transaction type.\n\n\n\n\n\n\nReceiverParty\n\n\nReceiverParty\n\n\nYes\n\n\nIf business operation/action, this is the affected party; if transaction, it is the opposite party to the PrimaryParty\n\n\n\n\n\n\nAccessDevice\n\n\nAccessDevice\n\n\nYes\n\n\nIt indicates the access device which the initiator uses to initiate the request.\n\n\n\n\n\n\n\n\n3.13 \nRequest\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTransaction\n\n\nTransaction\n\n\nNo\n\n\nIt indicates a transaction.\n\n\n\n\n\n\nIdentity\n\n\nIdentity\n\n\nNo\n\n\nThis section is used to specify all identities involved in the request\n\n\n\n\n\n\nKeyOwner\n\n\nxsd:integer\n\n\nNo\n\n\nIt indicates which Key is used to encrypt the elements Initator.SecurityCredential and the EncryptedParameters. Its value are enumerated as follows: 1 - the API Caller's Key, 2 - the Initiator's Key\n\n\n\n\n\n\n\n\n3.14 \nResponse\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResponseCode\n\n\nxsd:string\n\n\nNo\n\n\nIt indicates whether MM accepts the request or not.\n\n\n\n\n\n\nResponseDesc\n\n\nxsd:string\n\n\nYes\n\n\nIts value is a description for the parameter ResultCode.\n\n\n\n\n\n\nConversationID\n\n\nxsd:string\n\n\nYes\n\n\nThe unique identifier generated by M-Pesa for the request message.\n\n\n\n\n\n\nOriginatorConversationID\n\n\nxsd:string\n\n\nYes\n\n\nThe unique identifier generated by the third party for the request message.\n\n\n\n\n\n\nServiceStatus\n\n\nxsd:string\n\n\nYes\n\n\nIt indicates the MM service status.\n\n\n\n\n\n\n\n\n3.15 \nResultParameters\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResultParameter\n\n\nParameterType [0...unbounded ]\n\n\nYes\n\n\nIt is used to carry specific parameters for specific transaction or business operation.\n\n\n\n\n\n\n\n\n3.16 \nResult\n structure\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResultType\n\n\nxsd:integer\n\n\nYes\n\n\n0: completed 1: waiting for further messages\n\n\n\n\n\n\nResultCode\n\n\nxsd:string\n\n\nNo\n\n\nIt indicates whether MM processes the request successfully or not. Max length is 10\n\n\n\n\n\n\nResultDesc\n\n\nxsd:string\n\n\nYes\n\n\nIts value is a description for the parameter ResultCode.Max length is 1024\n\n\n\n\n\n\nOriginatorConversationID\n\n\nxsd:string\n\n\nYes\n\n\nThe unique identifier of the request message generated by third party. Its value comes from the request message.\n\n\n\n\n\n\nConversationID\n\n\nxsd:string\n\n\nYes\n\n\nThe unique identifier generated by MM for a request\n\n\n\n\n\n\nTransactionID\n\n\nxsd:string\n\n\nYes\n\n\nIt\u2019s only for transaction. When the request is a transaction request, MM will generate a unique identifier for the transaction.\n\n\n\n\n\n\nResultParameters\n\n\nResultParameters\n\n\nYes\n\n\nIt is used to carry specific parameters for specific transaction or business operation.\n\n\n\n\n\n\nReferenceData\n\n\nReferenceData\n\n\nYes\n\n\nIt comes from the request message\n\n\n\n\n\n\n\n\n3.17 \nResult\n code\n\n\n\n\n\n\n\n\nError Code\n\n\nError Description\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\nSuccess\n\n\nApiResult\n\n\n\n\n\n\n1\n\n\nInsufficient Funds\n\n\nApiResult\n\n\n\n\n\n\n2\n\n\nLess Than Minimum Transaction Value\n\n\nApiResult\n\n\n\n\n\n\n3\n\n\nMore Than Maximum Transaction Value\n\n\nApiResult\n\n\n\n\n\n\n4\n\n\nWould Exceed Daily Transfer Limit\n\n\nApiResult\n\n\n\n\n\n\n5\n\n\nWould Exceed Minimum Balance\n\n\nApiResult\n\n\n\n\n\n\n6\n\n\nUnresolved Primary Party\n\n\nApiResult\n\n\n\n\n\n\n7\n\n\nUnresolved Receiver Party\n\n\nApiResult\n\n\n\n\n\n\n8\n\n\nWould Exceed Maxiumum Balance\n\n\nApiResult\n\n\n\n\n\n\n11\n\n\nDebit Account Invalid\n\n\nApiResult\n\n\n\n\n\n\n12\n\n\nCredit Account Invaliud\n\n\nApiResult\n\n\n\n\n\n\n13\n\n\nUnresolved Debit Account\n\n\nApiResult\n\n\n\n\n\n\n14\n\n\nUnresolved Credit Account\n\n\nApiResult\n\n\n\n\n\n\n15\n\n\nDuplicate Detected\n\n\nApiResult\n\n\n\n\n\n\n17\n\n\nInternal Failure\n\n\nApiResult\n\n\n\n\n\n\n18\n\n\nInitiator Credential Check Failure\n\n\nApiResult\n\n\n\n\n\n\n19\n\n\nMessage Sequencing Failure\n\n\nApiResult\n\n\n\n\n\n\n20\n\n\nUnresolved Initiator\n\n\nApiResult\n\n\n\n\n\n\n21\n\n\nInitiator to Primary Party Permission Failure\n\n\nApiResult\n\n\n\n\n\n\n22\n\n\nInitiator to Receiver Party Permission Failure\n\n\nApiResult\n\n\n\n\n\n\n23\n\n\nRequest schema validation error\n\n\nApiResponse\n\n\n\n\n\n\n24\n\n\nMissing mandatory fields\n\n\nApiResponse\n\n\n\n\n\n\n25\n\n\nCannot communicate with Caller\n\n\nApiResponse\n\n\n\n\n\n\n26\n\n\nTraffic blocking condition in place\n\n\nApiResponse\n\n\n\n\n\n\n0\n\n\nSuccess\n\n\nApiResponse\n\n\n\n\n\n\n100000000\n\n\nRequest was cached, waiting for resending\n\n\nApiResponse\n\n\n\n\n\n\n100000001\n\n\nThe system is overload\n\n\nApiResponse\n\n\n\n\n\n\n100000002\n\n\nThrottling error\n\n\nApiResponse\n\n\n\n\n\n\n100000003\n\n\nExceed the limitation of the LICENSE\n\n\nApiResponse\n\n\n\n\n\n\n100000004\n\n\nInternal Server Error\n\n\nApiResponse\n\n\n\n\n\n\n100000005\n\n\nInvalid input value:%1\n%1 indicates the parameter\u2019s name.\n\n\nApiResponse\n\n\n\n\n\n\n100000006\n\n\nSP\u2019s status is abnormal\n\n\nApiResponse\n\n\n\n\n\n\n100000007\n\n\nAuthentication failed\n\n\nApiResponse\n\n\n\n\n\n\n100000008\n\n\nService\u2019s status is abnormal\n\n\nApiResponse\n\n\n\n\n\n\n100000008\n\n\nService\u2019s status is abnormal\n\n\nApiResponse\n\n\n\n\n\n\n100000009\n\n\nAPI\u2019s status is abnormal\n\n\nApiResponse\n\n\n\n\n\n\n100000010\n\n\nInsufficient permissions\n\n\nApiResponse\n\n\n\n\n\n\n100000011\n\n\nExceed the limitation of request rate\n\n\nApiResponse\n\n\n\n\n\n\n100000012\n\n\nInsufficient balance\n\n\nApiResponse\n\n\n\n\n\n\n100000013\n\n\nNo route\n\n\nApiResponse\n\n\n\n\n\n\n100000014\n\n\nMissing mandatory parameter:%1\n%1 indicates the parameter\u2019s name.\nApiResponse\n\n\n\n\n\n\n\n\n\n\nThe following table lists result codes and result descriptions which are provided to the third party. These may be commincated either in the synchronous \nApiResponse\n message, or in the asynchronous \nApiResult\n message.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\nSuccess\nThis is indicated for both ApiResponse and ApiResult messages. An ApiResponse value of 0 indicates that the request has passed basic validation tests and been passed on to the core system for further processing. An ApiResult value of 0 means that the requested financial transaction has been completed successfully.\n\n\n\n\n\n\n1\n\n\nInsufficientFunds\nTypically indicates that the primary party does not have enough money to complete the requested financial transaction. In the case of the B2C API, this means that the business organisation does not have enough money in its utility account.\nThis is returned by the \nApiResult\n and represented internally as a transaction reason.\n\n\n\n\n\n\n2\n\n\nLessThanMinimumTransactionValue\n\n\n\n\n\n\n3\n\n\nMoreThanMaximumTransactionValue\nEach of these potential failures derive from the rules which govern MPesa financial transactions. In the case of the B2C API, these are taken from \nDefaultBusinessUtilityAccount\n rules, which specify a lower bound of 10 KE shillings and an upper bound of 70000. For promotion payments and salary payments to unregistered users, the upper limit is lower: 35000. Likewise, the lower bound for these 2 transactions is also different: 101 rather than 10.\nThese are both returned by the \nApiResult\n and represented internally as a transaction reason.\n\n\n\n\n\n\n4\n\n\nWouldExceedDailyTransferLimit\nThis is a limit on daily activity. For the business organisation, this is very high: 100000000 KE shillings. It is much more likely that this rule will apply to the customer, where the limit is 140000 KE shillings.\nThis is returned by the ApiResult and represented internally as a transaction reason.\n\n\n\n\n\n\n5\n\n\nWouldExceedMinimumBalance\nThis rule is rather confusingly named \u2013 it actually means that a transaction would bring the business organisations utility account bellow the required minimum \u2013 which is currently 0.\nThis is returned by the \nApiResult\n and represented internally as a transaction reason. It is computed during execution of the financial transaction.\n\n\n\n\n\n\n6\n\n\nUnresolvedPrimaryParty\n\n\n\n\n\n\n7\n\n\nUnresolvedReceiverParty\nThe primary party or receiver party cannot be associated with an MPesa identity. For transactions (such as promotion payment and salary payment) which are supported for unregistered users, the unresolved receiver party rule is not applied.\nThese are returned in the \nApiResult\n and checked before the linked financial transaction is created.\n\n\n\n\n\n\n8\n\n\nWouldExceedMaximumBalance\nFor the B2C API, this applies to the recipient MMF customer \u2013 the limit here is 100,000 KE shillings.\nThis is returned by the ApiResult and represented internally as a transaction reason. It is computed during execution of the financial transaction.\n\n\n\n\n\n\n9\n\n\nLessThanMinAirtimeValue\n\n\n\n\n\n\n10\n\n\nMoreThanMaxAirtimeValue\nNeither of these apply to B2C API operations.\n\n\n\n\n\n\n11\n\n\nDebitAccountInvalid\n\n\n\n\n\n\n12\n\n\nCreditAccountInvalid\n\n\n\n\n\n\n13\n\n\nUnresolvedDebitAccount\n\n\n\n\n\n\n14\n\n\nUnresolvedCreditAccount\nThese are all existing failure transaction reasons for B2C financial transactions \u2013 they would be issued to the caller in the ApiResult message. The latter 2 in particular are unlikely to occur, as the request would be rejected by Core API specific checks before the request reached the accounting engine.\n\n\n\n\n\n\n15\n\n\nDuplicateDetected\nCurrently, any requests which presents an originator conversation id which has been seen before will be rejected. This rule will need to be reconsidered in contexts which require multi-stage conversations or multiple Callers. This check (along with the message expiry check) is the first thing done by the transaction processor when handling an API request. The outcome is reported in the \nApiResult\n message.\n\n\n\n\n\n\n16\n\n\nPayUtilityInvalidAccountNumberFormat\nDoes not apply to the B2C API operations.\n\n\n\n\n\n\n17\n\n\nInternalFailure\nA catch all for failures which are not identified more specifically \u2013 this can occur in either the \nApiResponse\n or \nApiResult\n \u2013 although the intent is to replace any such error with a more precise message.\n\n\n\n\n\n\n18\n\n\nInitiatorCredentialCheckFailure\nThe password check for the initiator failed, either because the presented password is wrong, or something has gone wrong in the encryption or decryption steps. This is issued in the \nApiResult\n before the creation of a financial transaction.\n\n\n\n\n\n\n19\n\n\nApiRequestMessageExpiryFailure\nInitiators have the option to specify a request timestamp. If the gap between this value and the time at which the message is received by the transaction processor is too great, then the request is rejected. The specific interval is configured separately for each API operation (and indeed, for each API operation stage). This is the first check performed on an API request arriving at the transaction processor, and as such is included in the \nApiResult\n message.\n\n\n\n\n\n\n20\n\n\nUnresolvedInitiator\nThe initiator username presented with the request cannot be found. This is included in the \nApiResult\n.\n\n\n\n\n\n\n21\n\n\nInitiatorToPrimaryPartyPermissionFailure\nThe initiator presented does not have the right to issue requests for the specified primary party (as established during creation of the initiator on the admin web site). The is part of the \nApiResult\n, and computed prior to issuing a financial transaction.\n\n\n\n\n\n\n22\n\n\nInitiatorStatusCheckFailure\nThe presented initiator username can be received, but the initiator is not currently active. This fact is returned in the \nApiResult\n.\n\n\n\n\n\n\n23\n\n\nRequestSchemaValidationError\nIncoming API requests are validated against the schema defined in \nCPSInterface_Request.xsd\n. This is part of the ApiResponse message \u2013 the details of the validation error are included in the response.\n\n\n\n\n\n\n24\n\n\nMissingRequestParameters\nRequired input parameters are defined for each type of API operation. If these are missing, then this is issued in the \nApiResult\n message. The names of the missing parameters are included in the result parameters field.\n\n\n\n\n\n\n25\n\n\nInvalidRequestParameters\nIf all required parameters are presented, then validation checks are performed. Specifically, the parameter is checked to see if it can be converted to the intended type, and then checked against (optional) configuration regular expression based validation rules. For the B2C API, only the type check (i.e the amount specified is a valid decimal) is performed. Failures are indicated in the \nApiResult\n message, with the details included in the result parameters.\n\n\n\n\n\n\n26\n\n\nSystemTooBusy\nIncluded in the \nApiResponse\n message if a traffic blocking condition is in place. See section 5.1 for more detail.\n\n\n\n\n\n\n28\n\n\nInitiatorAllowedOperationCheckFailure\nUpon creation, initiators are assigned permissions for specific API operations \u2013 if the operation specified in the request message is not included in this list, then this \nApiResult\n message is received.\n\n\n\n\n\n\n29\n\n\nInvalidCommand\nThe command specified in the request is not defined \u2013 this is part of the \nApiResult\n.\n\n\n\n\n\n\n30\n\n\nErrorSerializingRequest\nAfter XML schema validation, the API attempts to convert the XML request into an internal ApiRequest object \u2013 any failures result in this \nApiResponse\n message. The details of the exception are included.\n\n\n\n\n\n\n31\n\n\nInitiatorNotSpecified\nThe initiator username is not specified, or not specified in a way that can be parsed.\n\n\n\n\n\n\n32\n\n\nErrorSerializingRequest\nThe presented identifier for the initiator is not a username.\n\n\n\n\n\n\n33\n\n\nPrimaryPartyNotSpecified\n\n\n\n\n\n\n34\n\n\nPrimaryPartyIdentifierInvalid\n\n\n\n\n\n\n35\n\n\nReceiverPartyNotSpecified\n\n\n\n\n\n\n36\n\n\nReceiverPartyIdentifierInvalid\nIn all these case, one of the API parties is either missing from the request, or has been presented with the wrong identifier type., This kind of failure is indicated in the \nApiResult\n message.\n\n\n\n\n\n\n37\n\n\nMissingApiCommand\nNo command is included in the request \u2013 in general this problem should be captured by the XML schema validation, but if it is not this \nApiResult\n message is issued.\n\n\n\n\n\n\n38\n\n\nInvalidConversationId\n\n\n\n\n\n\n39\n\n\nUnknownConversationId\nNot currently checked for \u2013 this will take place for multi-stage conversations.\n\n\n\n\n\n\n40\n\n\nInvalidParameterDefinition", 
            "title": "Data Type Definition"
        }, 
        {
            "location": "/b2b/data_type_definition/#31-identitytype-enumeration", 
            "text": "List of  IdentityType  values.     Enumeration  Description      1000  Customer    2000  SPOperator    3000  OrganizationOperator    5000  Organization    6000  Till    8000  SP", 
            "title": "3.1 IdentityType enumeration"
        }, 
        {
            "location": "/b2b/data_type_definition/#32-identifiertype-enumeration", 
            "text": "List of  IdentityType  values.     Enumeration  Description      1  MSISDN    2  TillNumber    3  SPShortCode    4  OrganizationShortCode    5  IdentityID    6  O2CLink    9  SPOperatorCode    10  POSNumber    10  OrganizationOperatorUserName    12  OrganizationOperatorCode    13  VoucherCode", 
            "title": "3.2 IdentifierType enumeration"
        }, 
        {
            "location": "/b2b/data_type_definition/#33-parametertype-structure", 
            "text": "Element name  Element type  Optional  Description      Key  xsd:string  No  It indicates a parameter name.    Value  xsd:string  No  It indicates a parameter value.", 
            "title": "3.3 ParameterType structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#34-parameters-structure", 
            "text": "Element name  Element type  Optional  Description      Parameter  ParameterTyp e[1..unbounde d]  No  It is used to carry specific parameters for specific transaction or business operation.", 
            "title": "3.4 Parameters structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#35-referencedata-structure", 
            "text": "Element name  Element type  Optional  Description      ReferenceItem  ParameterTyp e[1..unbounde d]  No  It is used carry some reference data that MM need not analyze but need to record it into transaction log.", 
            "title": "3.5 ReferenceData structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#36-transaction-structure", 
            "text": "Element name  Element type  Optional  Description      CommandID  xsd:string  No  The unique identifier of transaction/business operation. Max length is 64. eg: BusinessBuyGoods BusinessPayBill DisburseFundsToBusiness BusinessToBusinessTransfer BusinessTransferFromMMFToUtility BusinessTransferFromUtilityToMMF MerchantToMerchantTransfer MerchantTransferFromMerchantToWorking MerchantTransferFromWorkingToMerchant OrgBankAccountWithdrawal OrgRevenueSettlement MerchantServicesMMFAccountTransfer AgencyFloatAdvance    LanguageCode  xsd:string  Yes  It indicates language. It\u2019s reserved.    OriginatorConv ersationID  xsd:string  No  The unique identifier of the request message generated by third party. It is used to identify a request between the third party and MM. Max length is 128. Field must start with the Organisation short and name of organisation. Eg.  232323_KCBOrg_XXXXXX .  XXXXX  must be unique for every transaction.    ConversationID  xsd:string  Yes  The unique identifier generated by MM for a previous request message. It is used to support communication multi-times between the third party and MM for one operation/transaction.    Remark  xsd:string  Yes  The remark information about this operation. Max length is 255    Parameters  Parameters  Yes  It is used to carry specific parameters for specific transaction or business operation. If the element EncryptedParameters presents, this parameter should not present.    ReferenceData  ReferenceData  Yes  It is used carry some reference data that MM need not analyze but need to record it into transaction log.    Timestamp  xsd:string  No  The timestamp generated by the third party.", 
            "title": "3.6 Transaction structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#37-caller-structure", 
            "text": "Element name  Element type  Optional  Description      CallerType  xsd:integer  No  Indicates the type of the caller: 2 - APICaller, 3 - Other(Reserved)    ThirdPartyID  xsd:string  No  he unique identifier of a third party system defined in MM. It indicates the third party which initiates the request. Max length is 20    Password  xsd:string  Yes  This security credential of the ThirdPartyID defined in MM. If the password feature for third party is used in MM, then this parameter must be presented in the request message.    CheckSum  xsd:string  Yes  Currently it is unused. It is reserved for API security.    ResultURL  xsd:string  Yes  It indicates the destination URL where Broker should send the result message to.", 
            "title": "3.7 Caller structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#38-initiator-structure", 
            "text": "Element name  Element type  Optional  Description      IdentifierType  IdentifierType  No  It indicates the identifier type of the initiator. The value of this parameter must be a valid identifier type supported by MM.    Identifier  xsd:string  No  It indicates the identifier of the initiator. Its value must match the inputted value of the parameter IdentifierType.    SecurityCredential  xsd:string  No  It indicates the security credential of the initiator. Its value must match the inputted value of the parameter IdentifierType.    ShortCode  xsd:string  Yes  When the initiator is an organization operator, this parameter must be present in the request to indicate which organization the operator belongs to. If the initiator is not an organization operator, this parameter should not be present.     3.8.1 Password Encryption  The Caller will be required to confirm its authority to act on behalf of the Initiator (in other words, a specific M-PESA organisation) by presenting the user name and password for the Initiator, the latter encrypted with the public key from an X509 certificate issued to the Initiator specifically for this purpose.  The following algorithm must be followed by the Initiator to encrypt passwords:   First, create the block of data to be encrypted:   Write the unencrypted password value.  Then, encrypt the block of data created in step 1 with the public portion of the password key certificate. Use the RSA algorithm, and use PKCS #1.5 padding (not OAEP), and add the result to the encrypted stream \u2013 this becomes the encrypted password which is submitted via the API.  Convert the resulting encrypted byte array into a string using base64 encoding. Present this base64 encoded string in the API request as the initiator SecurityCredential value.", 
            "title": "3.8 Initiator structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#39-primaryparty-structure", 
            "text": "Element name  Element type  Optional  Description      IdentifierType  IdentifierType  No  It indicates the identifier type of the primary party. The value of this parameter must be a valid identifier type supported by MM and must match the inputted value of the parameter IdentityType.    Identifier  xsd:string  No  It indicates a parameter value.    ShortCode  xsd:string  Yes  It is reserved", 
            "title": "3.9 PrimaryParty structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#310-receiverparty-structure", 
            "text": "Element name  Element type  Optional  Description      IdentifierType  IdentifierType  No  It indicates the identifier type of the recipient party. The value of this parameter must be a valid identifier type supported by MM.    Identifier  xsd:string  No  It indicates the identifier of the recipient party. Its value must match the inputted value of the parameter IdentifierType.    ShortCode  xsd:string  Yes  When the receiver party is an organization operator or a Till, this parameter must be present in the request to indicate which organization the receiver party belongs to. If the receiver party is not an organization operator or a Till, this parameter should not be present.", 
            "title": "3.10 ReceiverParty structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#311-accessdevice-structure", 
            "text": "Element name  Element type  Optional  Description      IdentifierType  IdentifierType  No  It indicates the identifier type of the access device.    Identifier  xsd:string  No  It indicates the identifier of the access device. Its value must match the inputted value of parameter IdentifierType", 
            "title": "3.11 AccessDevice structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#312-identity-structure", 
            "text": "Element name  Element type  Optional  Description      Caller  Caller  No  It indicates the third party which initiates the request    Initiator  Initiator  No  It indicates the identity who makes the request. An initiator must be one of the following identity types: SP operator Organizationoperator(11) NOTE: The value  11 (Organization Operator) or  14 (SP Operator) will be used for all the services in this document.    PrimartyParty  PrimartyParty  Yes  If business operation/action, this element is not present; if transaction, this can be either the debit party or the credit party according to the transaction type.    ReceiverParty  ReceiverParty  Yes  If business operation/action, this is the affected party; if transaction, it is the opposite party to the PrimaryParty    AccessDevice  AccessDevice  Yes  It indicates the access device which the initiator uses to initiate the request.", 
            "title": "3.12 Identity structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#313-request-structure", 
            "text": "Element name  Element type  Optional  Description      Transaction  Transaction  No  It indicates a transaction.    Identity  Identity  No  This section is used to specify all identities involved in the request    KeyOwner  xsd:integer  No  It indicates which Key is used to encrypt the elements Initator.SecurityCredential and the EncryptedParameters. Its value are enumerated as follows: 1 - the API Caller's Key, 2 - the Initiator's Key", 
            "title": "3.13 Request structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#314-response-structure", 
            "text": "Element name  Element type  Optional  Description      ResponseCode  xsd:string  No  It indicates whether MM accepts the request or not.    ResponseDesc  xsd:string  Yes  Its value is a description for the parameter ResultCode.    ConversationID  xsd:string  Yes  The unique identifier generated by M-Pesa for the request message.    OriginatorConversationID  xsd:string  Yes  The unique identifier generated by the third party for the request message.    ServiceStatus  xsd:string  Yes  It indicates the MM service status.", 
            "title": "3.14 Response structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#315-resultparameters-structure", 
            "text": "Element name  Element type  Optional  Description      ResultParameter  ParameterType [0...unbounded ]  Yes  It is used to carry specific parameters for specific transaction or business operation.", 
            "title": "3.15 ResultParameters structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#316-result-structure", 
            "text": "Element name  Element type  Optional  Description      ResultType  xsd:integer  Yes  0: completed 1: waiting for further messages    ResultCode  xsd:string  No  It indicates whether MM processes the request successfully or not. Max length is 10    ResultDesc  xsd:string  Yes  Its value is a description for the parameter ResultCode.Max length is 1024    OriginatorConversationID  xsd:string  Yes  The unique identifier of the request message generated by third party. Its value comes from the request message.    ConversationID  xsd:string  Yes  The unique identifier generated by MM for a request    TransactionID  xsd:string  Yes  It\u2019s only for transaction. When the request is a transaction request, MM will generate a unique identifier for the transaction.    ResultParameters  ResultParameters  Yes  It is used to carry specific parameters for specific transaction or business operation.    ReferenceData  ReferenceData  Yes  It comes from the request message", 
            "title": "3.16 Result structure"
        }, 
        {
            "location": "/b2b/data_type_definition/#317-result-code", 
            "text": "Error Code  Error Description       0  Success  ApiResult    1  Insufficient Funds  ApiResult    2  Less Than Minimum Transaction Value  ApiResult    3  More Than Maximum Transaction Value  ApiResult    4  Would Exceed Daily Transfer Limit  ApiResult    5  Would Exceed Minimum Balance  ApiResult    6  Unresolved Primary Party  ApiResult    7  Unresolved Receiver Party  ApiResult    8  Would Exceed Maxiumum Balance  ApiResult    11  Debit Account Invalid  ApiResult    12  Credit Account Invaliud  ApiResult    13  Unresolved Debit Account  ApiResult    14  Unresolved Credit Account  ApiResult    15  Duplicate Detected  ApiResult    17  Internal Failure  ApiResult    18  Initiator Credential Check Failure  ApiResult    19  Message Sequencing Failure  ApiResult    20  Unresolved Initiator  ApiResult    21  Initiator to Primary Party Permission Failure  ApiResult    22  Initiator to Receiver Party Permission Failure  ApiResult    23  Request schema validation error  ApiResponse    24  Missing mandatory fields  ApiResponse    25  Cannot communicate with Caller  ApiResponse    26  Traffic blocking condition in place  ApiResponse    0  Success  ApiResponse    100000000  Request was cached, waiting for resending  ApiResponse    100000001  The system is overload  ApiResponse    100000002  Throttling error  ApiResponse    100000003  Exceed the limitation of the LICENSE  ApiResponse    100000004  Internal Server Error  ApiResponse    100000005  Invalid input value:%1 %1 indicates the parameter\u2019s name.  ApiResponse    100000006  SP\u2019s status is abnormal  ApiResponse    100000007  Authentication failed  ApiResponse    100000008  Service\u2019s status is abnormal  ApiResponse    100000008  Service\u2019s status is abnormal  ApiResponse    100000009  API\u2019s status is abnormal  ApiResponse    100000010  Insufficient permissions  ApiResponse    100000011  Exceed the limitation of request rate  ApiResponse    100000012  Insufficient balance  ApiResponse    100000013  No route  ApiResponse    100000014  Missing mandatory parameter:%1 %1 indicates the parameter\u2019s name. ApiResponse      The following table lists result codes and result descriptions which are provided to the third party. These may be commincated either in the synchronous  ApiResponse  message, or in the asynchronous  ApiResult  message.           0  Success This is indicated for both ApiResponse and ApiResult messages. An ApiResponse value of 0 indicates that the request has passed basic validation tests and been passed on to the core system for further processing. An ApiResult value of 0 means that the requested financial transaction has been completed successfully.    1  InsufficientFunds Typically indicates that the primary party does not have enough money to complete the requested financial transaction. In the case of the B2C API, this means that the business organisation does not have enough money in its utility account. This is returned by the  ApiResult  and represented internally as a transaction reason.    2  LessThanMinimumTransactionValue    3  MoreThanMaximumTransactionValue Each of these potential failures derive from the rules which govern MPesa financial transactions. In the case of the B2C API, these are taken from  DefaultBusinessUtilityAccount  rules, which specify a lower bound of 10 KE shillings and an upper bound of 70000. For promotion payments and salary payments to unregistered users, the upper limit is lower: 35000. Likewise, the lower bound for these 2 transactions is also different: 101 rather than 10. These are both returned by the  ApiResult  and represented internally as a transaction reason.    4  WouldExceedDailyTransferLimit This is a limit on daily activity. For the business organisation, this is very high: 100000000 KE shillings. It is much more likely that this rule will apply to the customer, where the limit is 140000 KE shillings. This is returned by the ApiResult and represented internally as a transaction reason.    5  WouldExceedMinimumBalance This rule is rather confusingly named \u2013 it actually means that a transaction would bring the business organisations utility account bellow the required minimum \u2013 which is currently 0. This is returned by the  ApiResult  and represented internally as a transaction reason. It is computed during execution of the financial transaction.    6  UnresolvedPrimaryParty    7  UnresolvedReceiverParty The primary party or receiver party cannot be associated with an MPesa identity. For transactions (such as promotion payment and salary payment) which are supported for unregistered users, the unresolved receiver party rule is not applied. These are returned in the  ApiResult  and checked before the linked financial transaction is created.    8  WouldExceedMaximumBalance For the B2C API, this applies to the recipient MMF customer \u2013 the limit here is 100,000 KE shillings. This is returned by the ApiResult and represented internally as a transaction reason. It is computed during execution of the financial transaction.    9  LessThanMinAirtimeValue    10  MoreThanMaxAirtimeValue Neither of these apply to B2C API operations.    11  DebitAccountInvalid    12  CreditAccountInvalid    13  UnresolvedDebitAccount    14  UnresolvedCreditAccount These are all existing failure transaction reasons for B2C financial transactions \u2013 they would be issued to the caller in the ApiResult message. The latter 2 in particular are unlikely to occur, as the request would be rejected by Core API specific checks before the request reached the accounting engine.    15  DuplicateDetected Currently, any requests which presents an originator conversation id which has been seen before will be rejected. This rule will need to be reconsidered in contexts which require multi-stage conversations or multiple Callers. This check (along with the message expiry check) is the first thing done by the transaction processor when handling an API request. The outcome is reported in the  ApiResult  message.    16  PayUtilityInvalidAccountNumberFormat Does not apply to the B2C API operations.    17  InternalFailure A catch all for failures which are not identified more specifically \u2013 this can occur in either the  ApiResponse  or  ApiResult  \u2013 although the intent is to replace any such error with a more precise message.    18  InitiatorCredentialCheckFailure The password check for the initiator failed, either because the presented password is wrong, or something has gone wrong in the encryption or decryption steps. This is issued in the  ApiResult  before the creation of a financial transaction.    19  ApiRequestMessageExpiryFailure Initiators have the option to specify a request timestamp. If the gap between this value and the time at which the message is received by the transaction processor is too great, then the request is rejected. The specific interval is configured separately for each API operation (and indeed, for each API operation stage). This is the first check performed on an API request arriving at the transaction processor, and as such is included in the  ApiResult  message.    20  UnresolvedInitiator The initiator username presented with the request cannot be found. This is included in the  ApiResult .    21  InitiatorToPrimaryPartyPermissionFailure The initiator presented does not have the right to issue requests for the specified primary party (as established during creation of the initiator on the admin web site). The is part of the  ApiResult , and computed prior to issuing a financial transaction.    22  InitiatorStatusCheckFailure The presented initiator username can be received, but the initiator is not currently active. This fact is returned in the  ApiResult .    23  RequestSchemaValidationError Incoming API requests are validated against the schema defined in  CPSInterface_Request.xsd . This is part of the ApiResponse message \u2013 the details of the validation error are included in the response.    24  MissingRequestParameters Required input parameters are defined for each type of API operation. If these are missing, then this is issued in the  ApiResult  message. The names of the missing parameters are included in the result parameters field.    25  InvalidRequestParameters If all required parameters are presented, then validation checks are performed. Specifically, the parameter is checked to see if it can be converted to the intended type, and then checked against (optional) configuration regular expression based validation rules. For the B2C API, only the type check (i.e the amount specified is a valid decimal) is performed. Failures are indicated in the  ApiResult  message, with the details included in the result parameters.    26  SystemTooBusy Included in the  ApiResponse  message if a traffic blocking condition is in place. See section 5.1 for more detail.    28  InitiatorAllowedOperationCheckFailure Upon creation, initiators are assigned permissions for specific API operations \u2013 if the operation specified in the request message is not included in this list, then this  ApiResult  message is received.    29  InvalidCommand The command specified in the request is not defined \u2013 this is part of the  ApiResult .    30  ErrorSerializingRequest After XML schema validation, the API attempts to convert the XML request into an internal ApiRequest object \u2013 any failures result in this  ApiResponse  message. The details of the exception are included.    31  InitiatorNotSpecified The initiator username is not specified, or not specified in a way that can be parsed.    32  ErrorSerializingRequest The presented identifier for the initiator is not a username.    33  PrimaryPartyNotSpecified    34  PrimaryPartyIdentifierInvalid    35  ReceiverPartyNotSpecified    36  ReceiverPartyIdentifierInvalid In all these case, one of the API parties is either missing from the request, or has been presented with the wrong identifier type., This kind of failure is indicated in the  ApiResult  message.    37  MissingApiCommand No command is included in the request \u2013 in general this problem should be captured by the XML schema validation, but if it is not this  ApiResult  message is issued.    38  InvalidConversationId    39  UnknownConversationId Not currently checked for \u2013 this will take place for multi-stage conversations.    40  InvalidParameterDefinition", 
            "title": "3.17 Result code"
        }, 
        {
            "location": "/b2b/web_service_interface/", 
            "text": "4.1 Interface: \nRequestMgrPortType\n\n\n4.1.1 Operation: \nGenericAPIRequest\n\n\nThe 3rd party invokes this operation to send a B2B request.\n\n\n4.1.1.1 Message Header: \nRequestSOAPHeader\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSpId\n\n\nxsd: string\n\n\nNo\n\n\nSP ID. This is the Service Provider Identifier that is allocated by the Broker to the 3rd party. [Example] 000201\n\n\n\n\n\n\nSpPassword\n\n\nxsd: string\n\n\nYes\n\n\nThis is an encrypted form of the SP password issued to an SP when an account is created on the Broker.\nThe encrypted password is a Base64 encoded string of the SHA- 256 hash of the concatenation of the spId, password and the timeStamp as illustrated below:\nGiven the following parameters:\nspId: 601399 \npassword: spPassword \ntimestamp: 20130702212854\nspPassword = BASE64(SHA-256(spId + Password + timeStamp)), e.g. \nspPassword = BASE64(SHA- 256(601399spPassword20130702212854)\n[Example] \ne6434ef249df55c7a21a0b45758a39bb\n\n\n\n\n\n\nServiceId\n\n\nxsd: string\n\n\nYes\n\n\nService ID.\nThis is the Service Identifier that is allocated by the Broker for every service created.\n[Example] 3500001000012\n\n\n\n\n\n\nTimestamp\n\n\nxsd: string\n\n\nYes\n\n\nTime stamp (UTC time).\nThe value is required during SHA-256 encryption for spPassword.\nNOTE: If the \nspPassword\n parameter must be set, this parameter is mandatory.\n[Format] yyyyMMddHHmmss \n[Example] 20100731064245\n\n\n\n\n\n\n\n\n4.1.1.2 Input Message: \nRequestMsg\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRequestMsg\n\n\nxsd: string\n\n\nNo\n\n\nRequest Message from 3rd party. Its value should be an instance of Request Type and a CDATA\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\nIf there is no configuration for notification URL on Broker side, which indicates the callback url for accepting notification of GenericAPIResult, the \nResultURL\n parameter inside Identity tag must present.\n\n\nIf there is no configuration for notification URL on Broker side, which indicates the callback url for accepting notification of cached requests expired, the 3rd party must add a key-pair parameter into \nReferenceData\n and the key is \nQueueTimeoutURL\n.\n\n\n\n\n4.1.1.3 Output Message: \nResponseMsg\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResponseMsg\n\n\nxsd: string\n\n\nNo\n\n\nResponse return to 3rd party. Its value should be an instance of Response Type and a CDATA.\n\n\n\n\n\n\n\n\n4.2 Interface: \nResultMgrPortType\n\n\n4.2.1 Operation: \nGenericAPIResult\n\n\nThis operation must be implemented by a Web Service at the 3rd party side if it requires notification of the final result for B2B request. It will be invoked by Broker to notify the 3rd party once Broker received the notification from Core API.\n\n\n4.2.1.1 Input Message: \nResultMsg\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResultMsg\n\n\nxsd: string\n\n\nNo\n\n\nRequest Message from Broker. Its value should be a instance of Result Type and a CDATA.\n\n\n\n\n\n\n\n\n4.2.1.2 Output Message: ResponseMsg\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResponseMsg\n\n\nxsd: string\n\n\nNo\n\n\nResponse return to Broker. Its value should be a instance of Response Type and a CDATA.\n\n\n\n\n\n\n\n\n4.3 Interface: \nQueueTimeoutNotificationPort\n\n\n4.3.1 Operation: \nnotifyQueueTimeout\n\n\nThis operation must be implemented by a Web Service at the 3rd party side if it requires notification of cached requests are expired. It will be invoked by Broker to notify the 3rd party once cached requests are expired.\n\n\n4.3.1.1 Input Message: \nnotifyQueueTimeout\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOriginatorConversationID\n\n\nxsd:string\n\n\n\n\noriginatorConversationID from the request sent by the 3rd party\n\n\n\n\n\n\noriginRequest\n\n\nxsd:string\n\n\nNo\n\n\nOriginal request without SOAP Header sent by 3rd party. Its value is encoded with base64, when the 3rd party receive the request, it should decode it.\n\n\n\n\n\n\nExtensionInfo\n\n\nParameters\n\n\nYes\n\n\nExtended parameters.\n\n\n\n\n\n\n\n\n4.3.1.2 Output Message: notifyQueueTimeoutResponse\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResult\n\n\nResult\n\n\nResult\n\n\nNo\n\n\n\n\n\n\nExtensionInfo\n\n\nParameters\n\n\nYes\n\n\nExtended parameters.\n\n\n\n\n\n\n\n\n4.3.1.3 Response Code\n\n\n\n\n\n\n\n\nResponseCode\n\n\nResponseDesc\n\n\n\n\n\n\n\n\n\n\n000000000\n\n\nSuccess\n\n\n\n\n\n\n000000001\n\n\nFailed\n\n\n\n\n\n\n\n\n4.4 Interface: \nQueryTransactionPort\n\n\n4.4.1 Operation: \nqueryTransaction\n\n\nThe 3rd party invokes this operation to query transaction information.\n\n\n4.4.1.1 Message Header: \nRequestSOAPHeader\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSpId\n\n\nxsd: string\n\n\nNo\n\n\nSP ID.\nIt\u2019s allocated by the Broker to the 3rd party.\n[Example] 000201\n\n\n\n\n\n\nspPassword\n\n\nxsd: string\n\n\nYes\n\n\nEncrypted authentication password for partners to access the Broker.\nThe value is a character string encrypted from \nspId + Password + timeStamp\n by SHA-256. The encryption formula is as follows: spPassword =BASE64(SHA-256(spId + Password + timeStamp))\nIn the preceding formula: timeStamp: value of timeStamp.Password: authentication password for 3rd parties to access the Broker. The value is allocated by the Broker.\nNOTE:\nThe authentication modes include SPID\nPassword, SPID\nIP\nPassword, and SPID\nIP. When the authentication mode is SPID\nPassword or SPID\nIP\nPassword, this parameter is mandatory.\n[Example] e6434ef249df55c7a21a0b45758a39bb\n\n\n\n\n\n\nServiceId\n\n\nxsd: string\n\n\nYes\n\n\nService ID.\nThe value is allocated by the Broker to the 3rd party.\n[Example] 3500001000012\n\n\n\n\n\n\ntimeStamp\n\n\nxsd: string\n\n\nYes\n\n\nTime stamp (UTC time).\nThe value is required during SHA-256 encryption for spPassword.\nNOTE:\nIf the spPassword parameter must be set, this parameter is mandatory.\n[Format] yyyyMMddHHmmss [Example] 20100731064245\n\n\n\n\n\n\n\n\n4.4.1.2 Input Message: \nqueryTransaction\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noriginatorConversationID\n\n\nxsd:string\n\n\n\n\nThe unique identifier of the request message generated by third party. It is used to identify a request between the third party and MM. Max length is 128\n\n\n\n\n\n\nextensionInfo\n\n\nParameters\n\n\nYes\n\n\nExtended parameters.\n\n\n\n\n\n\n\n\nTable 4-1\n extensionInfo Description\n\n\n\n\n\n\n\n\nParameter\n\n\nOptional\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nqueryDate\n\n\nYes\n\n\nString(20)\n\n\nThe date of the original conversation. Format is yyyyMMddHHmmss, for example: 20131230134412\nNote: \nIf this parameter does not present, it will cost more time to get the result.\n\n\n\n\n\n\n\n\n4.4.1.3 Output Message: \nqueryTransactionResponse\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResult\n\n\nResponse\n\n\nNo\n\n\n\n\n\n\n\n\nsubmitApiRequestList\n\n\nxsd:string[0-unbounded]\n\n\nYes\n\n\nRequests sent by the 3rd party. Its value is the requests sent by the 3rd party with base64 encoded.\n\n\n\n\n\n\nsubmitApiResponseList\n\n\nxsd:string[0-unbounded]\n\n\nYes\n\n\nResponses returned from the Broker. Its value is the responses returned from the Broker with base64 encoded.\n\n\n\n\n\n\nsubmitApiResultList\n\n\nxsd:string[0-unbounded]\n\n\nYes\n\n\nResults sent to the 3rd party. Its value is the requests sent by the Broker with base64 encoded.\n\n\n\n\n\n\nqueueTimeOutList\n\n\nxsd:string[0-unbounded]\n\n\nYes\n\n\nQueueTimeout requests sent to the 3rd party. Its value is the requests sent by the Broker with base64 encoded.\n\n\n\n\n\n\nextensionInfo\n\n\nParameters\n\n\nYes\n\n\nExtended parameters.\n\n\n\n\n\n\n\n\n4.4.1.4 Response Codes\n\n\n\n\n\n\n\n\nResponseCode\n\n\nResponseDesc\n\n\n\n\n\n\n\n\n\n\n000000000\n\n\nSuccess\n\n\n\n\n\n\n100000001\n\n\nThe system is overload\n\n\n\n\n\n\n100000002\n\n\nThrottling error\n\n\n\n\n\n\n100000003\n\n\nExceed the limitation of the LICENSE\n\n\n\n\n\n\n100000004\n\n\nInternal Server Error\n\n\n\n\n\n\n100000005\n\n\nInvalid input value:%1\n%1 indicates the parameter\u2019s name.\n\n\n\n\n\n\n100000006\n\n\nSP\u2019s status is abnormal\n\n\n\n\n\n\n100000007\n\n\nAuthentication failed\n\n\n\n\n\n\n100000008\n\n\nService\u2019s status is abnormal\n\n\n\n\n\n\n100000010\n\n\nInsufficient permissions\n\n\n\n\n\n\n100000014\n\n\nMissing mandatory parameter:%1 \n%1 indicates the parameter\u2019s name.\n\n\n\n\n\n\n\n\n4.5 Interface: \nManagement\n\n\n4.5.1 Operation: \nchangePassword\n\n\nThe 3rd party invokes this operation to change his password.\n\n\n4.5.2 Input Message: \nchangePassword\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nspId\n\n\nxsd: string\n\n\nNo\n\n\nSP ID.\nIt\u2019s allocated by the SAG to the 3rd party. \n[Example] 000201\n\n\n\n\n\n\nspPassword\n\n\nxsd: string\n\n\nYes\n\n\nEncrypted authentication password for partners to access the SAG.\nThe value is a character string encrypted from \nspId + Password + timeStamp\n by SHA-256. The encryption formula is as follows: spPassword =BASE64(SHA- 256(spId + Password + timeStamp))\nIn the preceding formula:\ntimeStamp:\n value of timeStamp.\nPassword:\n authentication password for 3rd parties to access the SAG. The value is allocated by the SAG.\nNOTE\n:\nThe authentication modes include SPID\nPassword, SPID\nIP\nPassword, and SPID\nIP. When the authentication mode is SPID\nPassword or SPID\nIP\nPassword, this parameter is mandatory.\n[Example] e6434ef249df55c7a21a0b45758a39bb\n\n\n\n\n\n\n\n\n4.5.3 Output Message: \nchangePasswordResponse\n\n\n\n\n\n\n\n\nElement name\n\n\nElement type\n\n\nOptional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresult\n\n\nResult\n\n\nNo\n\n\nResult\n\n\n\n\n\n\nextensionInfo\n\n\nParameters\n\n\nYes\n\n\nExtended parameters\n\n\n\n\n\n\n\n\n4.5.4 Response Code\n\n\n\n\n\n\n\n\nResponseCode\n\n\nResponseDesc\n\n\n\n\n\n\n\n\n\n\n000000000\n\n\nSuccess\n\n\n\n\n\n\n100000001\n\n\nThe system is overload\n\n\n\n\n\n\n100000002\n\n\nThrottling error\n\n\n\n\n\n\n100000003\n\n\nExceed the limitation of the LICENSE\n\n\n\n\n\n\n100000004\n\n\nInternal Server Error\n\n\n\n\n\n\n100000005\n\n\nInvalid input value:%1\n%1 indicates the parameter\u2019s name.\n\n\n\n\n\n\n100000006\n\n\nSP\u2019s status is abnormal\n\n\n\n\n\n\n100000007\n\n\nAuthentication failed\n\n\n\n\n\n\n100000014\n\n\nMissing mandatory parameter:%1 \n%1 indicates the parameter\u2019s name.", 
            "title": "Web Service Interface"
        }, 
        {
            "location": "/b2b/web_service_interface/#41-interface-requestmgrporttype", 
            "text": "4.1.1 Operation:  GenericAPIRequest  The 3rd party invokes this operation to send a B2B request.  4.1.1.1 Message Header:  RequestSOAPHeader     Element name  Element type  Optional  Description      SpId  xsd: string  No  SP ID. This is the Service Provider Identifier that is allocated by the Broker to the 3rd party. [Example] 000201    SpPassword  xsd: string  Yes  This is an encrypted form of the SP password issued to an SP when an account is created on the Broker. The encrypted password is a Base64 encoded string of the SHA- 256 hash of the concatenation of the spId, password and the timeStamp as illustrated below: Given the following parameters: spId: 601399  password: spPassword  timestamp: 20130702212854 spPassword = BASE64(SHA-256(spId + Password + timeStamp)), e.g.  spPassword = BASE64(SHA- 256(601399spPassword20130702212854) [Example]  e6434ef249df55c7a21a0b45758a39bb    ServiceId  xsd: string  Yes  Service ID. This is the Service Identifier that is allocated by the Broker for every service created. [Example] 3500001000012    Timestamp  xsd: string  Yes  Time stamp (UTC time). The value is required during SHA-256 encryption for spPassword. NOTE: If the  spPassword  parameter must be set, this parameter is mandatory. [Format] yyyyMMddHHmmss  [Example] 20100731064245     4.1.1.2 Input Message:  RequestMsg     Element name  Element type  Optional  Description      RequestMsg  xsd: string  No  Request Message from 3rd party. Its value should be an instance of Request Type and a CDATA     Note:   If there is no configuration for notification URL on Broker side, which indicates the callback url for accepting notification of GenericAPIResult, the  ResultURL  parameter inside Identity tag must present.  If there is no configuration for notification URL on Broker side, which indicates the callback url for accepting notification of cached requests expired, the 3rd party must add a key-pair parameter into  ReferenceData  and the key is  QueueTimeoutURL .   4.1.1.3 Output Message:  ResponseMsg     Element name  Element type  Optional  Description      ResponseMsg  xsd: string  No  Response return to 3rd party. Its value should be an instance of Response Type and a CDATA.", 
            "title": "4.1 Interface: RequestMgrPortType"
        }, 
        {
            "location": "/b2b/web_service_interface/#42-interface-resultmgrporttype", 
            "text": "4.2.1 Operation:  GenericAPIResult  This operation must be implemented by a Web Service at the 3rd party side if it requires notification of the final result for B2B request. It will be invoked by Broker to notify the 3rd party once Broker received the notification from Core API.  4.2.1.1 Input Message:  ResultMsg     Element name  Element type  Optional  Description      ResultMsg  xsd: string  No  Request Message from Broker. Its value should be a instance of Result Type and a CDATA.     4.2.1.2 Output Message: ResponseMsg     Element name  Element type  Optional  Description      ResponseMsg  xsd: string  No  Response return to Broker. Its value should be a instance of Response Type and a CDATA.", 
            "title": "4.2 Interface: ResultMgrPortType"
        }, 
        {
            "location": "/b2b/web_service_interface/#43-interface-queuetimeoutnotificationport", 
            "text": "4.3.1 Operation:  notifyQueueTimeout  This operation must be implemented by a Web Service at the 3rd party side if it requires notification of cached requests are expired. It will be invoked by Broker to notify the 3rd party once cached requests are expired.  4.3.1.1 Input Message:  notifyQueueTimeout     Element name  Element type  Optional  Description      OriginatorConversationID  xsd:string   originatorConversationID from the request sent by the 3rd party    originRequest  xsd:string  No  Original request without SOAP Header sent by 3rd party. Its value is encoded with base64, when the 3rd party receive the request, it should decode it.    ExtensionInfo  Parameters  Yes  Extended parameters.     4.3.1.2 Output Message: notifyQueueTimeoutResponse     Element name  Element type  Optional  Description      Result  Result  Result  No    ExtensionInfo  Parameters  Yes  Extended parameters.     4.3.1.3 Response Code     ResponseCode  ResponseDesc      000000000  Success    000000001  Failed", 
            "title": "4.3 Interface: QueueTimeoutNotificationPort"
        }, 
        {
            "location": "/b2b/web_service_interface/#44-interface-querytransactionport", 
            "text": "4.4.1 Operation:  queryTransaction  The 3rd party invokes this operation to query transaction information.  4.4.1.1 Message Header:  RequestSOAPHeader     Element name  Element type  Optional  Description      SpId  xsd: string  No  SP ID. It\u2019s allocated by the Broker to the 3rd party. [Example] 000201    spPassword  xsd: string  Yes  Encrypted authentication password for partners to access the Broker. The value is a character string encrypted from  spId + Password + timeStamp  by SHA-256. The encryption formula is as follows: spPassword =BASE64(SHA-256(spId + Password + timeStamp)) In the preceding formula: timeStamp: value of timeStamp.Password: authentication password for 3rd parties to access the Broker. The value is allocated by the Broker. NOTE: The authentication modes include SPID Password, SPID IP Password, and SPID IP. When the authentication mode is SPID Password or SPID IP Password, this parameter is mandatory. [Example] e6434ef249df55c7a21a0b45758a39bb    ServiceId  xsd: string  Yes  Service ID. The value is allocated by the Broker to the 3rd party. [Example] 3500001000012    timeStamp  xsd: string  Yes  Time stamp (UTC time). The value is required during SHA-256 encryption for spPassword. NOTE: If the spPassword parameter must be set, this parameter is mandatory. [Format] yyyyMMddHHmmss [Example] 20100731064245     4.4.1.2 Input Message:  queryTransaction     Element name  Element type  Optional  Description      originatorConversationID  xsd:string   The unique identifier of the request message generated by third party. It is used to identify a request between the third party and MM. Max length is 128    extensionInfo  Parameters  Yes  Extended parameters.     Table 4-1  extensionInfo Description     Parameter  Optional  Type  Description      queryDate  Yes  String(20)  The date of the original conversation. Format is yyyyMMddHHmmss, for example: 20131230134412 Note:  If this parameter does not present, it will cost more time to get the result.     4.4.1.3 Output Message:  queryTransactionResponse     Element name  Element type  Optional  Description      Result  Response  No     submitApiRequestList  xsd:string[0-unbounded]  Yes  Requests sent by the 3rd party. Its value is the requests sent by the 3rd party with base64 encoded.    submitApiResponseList  xsd:string[0-unbounded]  Yes  Responses returned from the Broker. Its value is the responses returned from the Broker with base64 encoded.    submitApiResultList  xsd:string[0-unbounded]  Yes  Results sent to the 3rd party. Its value is the requests sent by the Broker with base64 encoded.    queueTimeOutList  xsd:string[0-unbounded]  Yes  QueueTimeout requests sent to the 3rd party. Its value is the requests sent by the Broker with base64 encoded.    extensionInfo  Parameters  Yes  Extended parameters.     4.4.1.4 Response Codes     ResponseCode  ResponseDesc      000000000  Success    100000001  The system is overload    100000002  Throttling error    100000003  Exceed the limitation of the LICENSE    100000004  Internal Server Error    100000005  Invalid input value:%1 %1 indicates the parameter\u2019s name.    100000006  SP\u2019s status is abnormal    100000007  Authentication failed    100000008  Service\u2019s status is abnormal    100000010  Insufficient permissions    100000014  Missing mandatory parameter:%1  %1 indicates the parameter\u2019s name.", 
            "title": "4.4 Interface: QueryTransactionPort"
        }, 
        {
            "location": "/b2b/web_service_interface/#45-interface-management", 
            "text": "4.5.1 Operation:  changePassword  The 3rd party invokes this operation to change his password.  4.5.2 Input Message:  changePassword     Element name  Element type  Optional  Description      spId  xsd: string  No  SP ID. It\u2019s allocated by the SAG to the 3rd party.  [Example] 000201    spPassword  xsd: string  Yes  Encrypted authentication password for partners to access the SAG. The value is a character string encrypted from  spId + Password + timeStamp  by SHA-256. The encryption formula is as follows: spPassword =BASE64(SHA- 256(spId + Password + timeStamp)) In the preceding formula: timeStamp:  value of timeStamp. Password:  authentication password for 3rd parties to access the SAG. The value is allocated by the SAG. NOTE : The authentication modes include SPID Password, SPID IP Password, and SPID IP. When the authentication mode is SPID Password or SPID IP Password, this parameter is mandatory. [Example] e6434ef249df55c7a21a0b45758a39bb     4.5.3 Output Message:  changePasswordResponse     Element name  Element type  Optional  Description      result  Result  No  Result    extensionInfo  Parameters  Yes  Extended parameters     4.5.4 Response Code     ResponseCode  ResponseDesc      000000000  Success    100000001  The system is overload    100000002  Throttling error    100000003  Exceed the limitation of the LICENSE    100000004  Internal Server Error    100000005  Invalid input value:%1 %1 indicates the parameter\u2019s name.    100000006  SP\u2019s status is abnormal    100000007  Authentication failed    100000014  Missing mandatory parameter:%1  %1 indicates the parameter\u2019s name.", 
            "title": "4.5 Interface: Management"
        }, 
        {
            "location": "/b2b/transaction_types/", 
            "text": "", 
            "title": "Transaction Types"
        }, 
        {
            "location": "/b2b/examples/", 
            "text": "", 
            "title": "Examples"
        }
    ]
}